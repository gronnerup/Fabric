#---------------------------------------------------------
# Default values
#---------------------------------------------------------
branch_name = "feature/MyThird" 
action = "Delete" # Options: Create/Merge/Delete. Defaults to Create if not set. Merge is only supported from a DevOps pipeline.
default_feature_prefix = "feature/"

#---------------------------------------------------------
# Main script
#---------------------------------------------------------
import os, sys, argparse, jwt
from datetime import datetime

start_time = datetime.now()

os.chdir(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../..'))
sys.path.append(os.getcwd())

import modules.fabric_functions as fabfunc
import modules.misc_functions as miscfunc
import modules.auth_functions as authfunc
import modules.devops_functions as devopsfunc

# Get arguments 
parser = argparse.ArgumentParser(description="Fabric feature setup arguments")
parser.add_argument("--fabric_token", required=False, default=None, help="Microsoft Entra ID token for Fabric API based on signed in user. Default is None.")
parser.add_argument("--feature_name", required=False, default=branch_name, help="Name of the feature to create.")
parser.add_argument("--feature_prefix", required=False, default=default_feature_prefix, help="Prefix/folder for feature branches.")
parser.add_argument("--action", required=False, default=action if not action else action, help="Indicates the action to perform (Create/Merge/Delete). Default is Create.")

args = parser.parse_args()
fabric_token = args.fabric_token
feature_name = args.feature_name
feature_prefix = args.feature_prefix
action = args.action.lower()

feature_json = miscfunc.load_json(os.path.join(os.path.dirname(__file__), f'../environments/feature.json'))
layers = feature_json.get("layers")
permissions = feature_json.get("permissions")
capacity_id = feature_json.get("capacity_id")
dev_env_name = feature_json.get("feature_name")
git_integration = feature_json.get("git_integration")

is_devops_run = True
org_url = os.getenv("SYSTEM_TEAMFOUNDATIONCOLLECTIONURI")

if org_url: # Is run from DevOps Pipeline
    print("Is DevOps run")
    project_name = os.getenv("SYSTEM_TEAMPROJECT")
    repo_name = os.getenv("BUILD_REPOSITORY_NAME")
    branch_pathpath = os.getenv("BUILD_SOURCEBRANCH")
    branch_name = os.getenv("BUILD_SOURCEBRANCHNAME")
    branch_owner_name = os.getenv("BUILD_REQUESTEDFOR")
    branch_owner_email = os.getenv("BUILD_REQUESTEDFOREMAIL")
    commit_id = os.getenv("BUILD_SOURCEVERSION")
    devops_access_token = os.getenv("SYSTEM_ACCESSTOKEN")
    org_name = org_url.split('/')[3]
    full_branch_name = branch_pathpath.replace(f"refs/heads/{feature_prefix}", "")
else: # Is locale execution
    is_devops_run = False
    
    full_branch_name = feature_name.replace(f"{feature_prefix}", "")
    credential = authfunc.create_credentials_from_user()
    fabric_token = credential.get_token("https://api.fabric.microsoft.com/.default").token
    devops_token = credential.get_token("499b84ac-1321-427f-aa17-267ca6975798/.default").token
    decoded_token = jwt.decode(fabric_token, options={"verify_signature": False})
    branch_owner_name = decoded_token.get("name", "N/A")
    branch_owner_email = decoded_token.get("upn", "N/A")

    if git_integration:
        org_name = feature_json.get("git_integration").get("devops_organization")
        project_name = feature_json.get("git_integration").get("devops_project")
        repo_name = feature_json.get("git_integration").get("devops_repo")
        base_branch = feature_json.get("git_integration").get("devops_base_branch")
        

env_credentials = authfunc.get_environment_credentials('feature', os.path.join(os.path.dirname(__file__), f'../../credentials/'))
if fabric_token is None and env_credentials is not None:
    fabric_token = authfunc.get_access_token(env_credentials["tenant_id"], env_credentials["app_id"], env_credentials["app_secret"], 'https://api.fabric.microsoft.com')

if action == "create":
    miscfunc.print_header(f"Setting up feature development environment")

    for layer, layer_definition in layers.items():
        if not is_devops_run:
            devopsfunc.create_branch(
                    devops_token, 
                    org_name, 
                    project_name,
                    repo_name,
                    base_branch,
                    feature_name)
        
        workspace_name = dev_env_name.format(feature_name=full_branch_name, layer_name=layer)

        current_time_utc = datetime.now().strftime("%Y-%m-%d %H:%M:%S (UTC)")
        workspace_desc = (
            f"Feature workspace auto-generated by script: {current_time_utc}\n\n"
            f"Organization: {org_name}\n"
            f"Project: {project_name}\n"
            f"Repository: {repo_name}\n"
            f"Branch: {branch_name}\n"
            f"Responsible: {branch_owner_name} ({branch_owner_email})"
        )
        
        feature_workspace = fabfunc.get_workspace_by_name(fabric_token, workspace_name)
        if feature_workspace is None:
            workspace = fabfunc.create_workspace(fabric_token, workspace_name, workspace_desc)
            workspace_id = workspace.get("id")

            fabfunc.assign_workspace_to_capacity(fabric_token, workspace_id, capacity_id)
            if is_devops_run:
                fabfunc.add_workspace_user(fabric_token, workspace_id, "Admin", "User", branch_owner_email)
            
            if permissions:
                print(f"  → Assigning workspace permissions... ")
                for permission, definitions in permissions.items():
                    for definition in definitions:
                        fabfunc.add_workspace_user(fabric_token, workspace_id, permission, definition.get("type"), definition.get("id"))
            
            if layer_definition.get("spark_settings"):
                fabfunc.update_workspace_spark_settings(fabric_token, workspace_id, layer_definition.get("spark_settings"), True)

            if git_integration and not is_devops_run:
                print (f"  → Setting up Git integration for workspace {workspace_name} connection to feature {feature_name}.")

                connect_response = fabfunc.connect_workspace_to_git(
                    fabric_token, 
                    workspace_id, 
                    org_name, 
                    project_name,
                    repo_name,
                    feature_name,
                    layer_definition.get("git_folder"))

                if not connect_response is None:
                    init_response = fabfunc.initialize_workspace_git_connection(fabric_token, workspace_id)
                    if init_response and init_response.get("requiredAction") != "None" and init_response.get("remoteCommitHash"):
                        fabfunc.update_workspace_from_git(fabric_token, workspace_id, init_response["remoteCommitHash"])

        else:
            print(f"A feature workspace already exist for layer {layer}! Skipping development environment setup...")
            break
        
        print ("")
elif action == "merge":
    miscfunc.print_header(f"Delete feature development workspaces based on merge to main branch")
    pr_response = devopsfunc.get_pull_request(devops_access_token, org_name, project_name, repo_name, commit_id)
    if not pr_response is None:
        commit_obj = pr_response['results'][0].get(commit_id)
        if commit_obj:
            source_ref_name = commit_obj[0]["sourceRefName"]
            if source_ref_name:
                for layer, layer_definition in layers.items():
                    branch_name = source_ref_name.replace(f"refs/heads/{feature_prefix}","")
                    workspace_name = dev_env_name.format(feature_name=branch_name, layer_name=layer)
                    feature_workspace = fabfunc.get_workspace_by_name(fabric_token, workspace_name)
                    if not feature_workspace is None:
                        fabfunc.delete_workspace(fabric_token, feature_workspace.get("id"), workspace_name)
                    else:
                        print(f"No workspace found matching the feature branch {workspace_name}!")
            else:
                print(f"Not a pull request. Skipping removal of feature workspace for commit id {commit_id}.")
        else:
                print(f"Not a pull request. Skipping removal of feature workspace for commit id {commit_id}.")

elif action == "delete":
    miscfunc.print_header(f"Delete feature development workspaces and feature branch")
    
    for layer, layer_definition in layers.items():    
        workspace_name = dev_env_name.format(feature_name=full_branch_name, layer_name=layer)
        feature_workspace = fabfunc.get_workspace_by_name(fabric_token, workspace_name)
        if not feature_workspace is None:
            fabfunc.delete_workspace(fabric_token, feature_workspace.get("id"), workspace_name)
        else:
            print(f"  → No workspace found matching the feature branch {workspace_name}!")
    
    devopsfunc.delete_branch(
        devops_token, 
        org_name, 
        project_name,
        repo_name,
        feature_name,
        True)

duration = datetime.now() - start_time
print(f"\nScript duration: {duration}\n")