pr:
- none

trigger: 
  branches:
    include:
    - main
    
parameters:
  - name: ServiceConnection
    displayName: Service Connection
    type: string
    default: serviceconnection-peerinsights
        
pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Cleanup_Dev_Env
    displayName: 'Remove Development Environment'
    jobs:
    - job: 'CleanupDev'
      condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
      displayName: 'Clean up after feature development'
      steps:
      - checkout: self

      - bash: |
          echo "Agent.BuildDirectory: $(Agent.BuildDirectory)"
          echo "Agent.ContainerMapping: $(Agent.ContainerMapping)"
          echo "Agent.HomeDirectory: $(Agent.HomeDirectory)"
          echo "Agent.Id: $(Agent.Id)"
          echo "Agent.JobName: $(Agent.JobName)"
          echo "Agent.JobStatus: $(Agent.JobStatus)"
          echo "Agent.MachineName: $(Agent.MachineName)"
          echo "Agent.Name: $(Agent.Name)"
          echo "Agent.OS: $(Agent.OS)"
          echo "Agent.OSArchitecture: $(Agent.OSArchitecture)"
          echo "Agent.TempDirectory: $(Agent.TempDirectory)"
          echo "Agent.ToolsDirectory: $(Agent.ToolsDirectory)"
          echo "Agent.WorkFolder: $(Agent.WorkFolder)"
          echo "Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)"
          echo "Build.BuildId: $(Build.BuildId)"
          echo "Build.BuildNumber: $(Build.BuildNumber)"
          echo "Build.BuildUri: $(Build.BuildUri)"
          echo "Build.BinariesDirectory: $(Build.BinariesDirectory)"
          echo "Build.ContainerId: $(Build.ContainerId)"
          echo "Build.DefinitionName: $(Build.DefinitionName)"
          echo "Build.DefinitionVersion: $(Build.DefinitionVersion)"
          echo "Build.QueuedBy: $(Build.QueuedBy)"
          echo "Build.QueuedById: $(Build.QueuedById)"
          echo "Build.Reason: $(Build.Reason)"
          echo "Build.Repository.Clean: $(Build.Repository.Clean)"
          echo "Build.Repository.LocalPath: $(Build.Repository.LocalPath)"
          echo "Build.Repository.ID: $(Build.Repository.ID)"
          echo "Build.Repository.Name: $(Build.Repository.Name)"
          echo "Build.Repository.Provider: $(Build.Repository.Provider)"
          echo "Build.Repository.Tfvc.Workspace: $(Build.Repository.Tfvc.Workspace)"
          echo "Build.Repository.Uri: $(Build.Repository.Uri)"
          echo "Build.RequestedFor: $(Build.RequestedFor)"
          echo "Build.RequestedForEmail: $(Build.RequestedForEmail)"
          echo "Build.RequestedForId: $(Build.RequestedForId)"
          echo "Build.SourceBranch: $(Build.SourceBranch)"
          echo "Build.SourceBranchName: $(Build.SourceBranchName)"
          echo "Build.SourcesDirectory: $(Build.SourcesDirectory)"
          echo "Build.SourceVersion: $(Build.SourceVersion)"
          echo "Build.SourceVersionMessage: $(Build.SourceVersionMessage)"
          echo "Build.StagingDirectory: $(Build.StagingDirectory)"
          echo "Build.Repository.Git.SubmoduleCheckout: $(Build.Repository.Git.SubmoduleCheckout)"
          echo "Build.SourceTfvcShelveset: $(Build.SourceTfvcShelveset)"
          echo "Build.TriggeredBy.BuildId: $(Build.TriggeredBy.BuildId)"
          echo "Build.TriggeredBy.DefinitionId: $(Build.TriggeredBy.DefinitionId)"
          echo "Build.TriggeredBy.DefinitionName: $(Build.TriggeredBy.DefinitionName)"
          echo "Build.TriggeredBy.BuildNumber: $(Build.TriggeredBy.BuildNumber)"
          echo "Build.TriggeredBy.ProjectID: $(Build.TriggeredBy.ProjectID)"
          echo "Common.TestResultsDirectory: $(Common.TestResultsDirectory)"
          echo "Pipeline.Workspace: $(Pipeline.Workspace)"
          echo "Environment.Name: $(Environment.Name)"
          echo "Environment.Id: $(Environment.Id)"
          echo "Environment.ResourceName: $(Environment.ResourceName)"
          echo "Environment.ResourceId: $(Environment.ResourceId)"
          echo "System.AccessToken: $(System.AccessToken)"
          echo "System.CollectionId: $(System.CollectionId)"
          echo "System.CollectionUri: $(System.CollectionUri)"
          echo "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
          echo "System.DefinitionId: $(System.DefinitionId)"
          echo "System.HostType: $(System.HostType)"
          echo "System.JobAttempt: $(System.JobAttempt)"
          echo "System.JobDisplayName: $(System.JobDisplayName)"
          echo "System.JobId: $(System.JobId)"
          echo "System.JobName: $(System.JobName)"
          echo "System.PhaseAttempt: $(System.PhaseAttempt)"
          echo "System.PhaseDisplayName: $(System.PhaseDisplayName)"
          echo "System.PhaseName: $(System.PhaseName)"
          echo "System.StageAttempt: $(System.StageAttempt)"
          echo "System.StageDisplayName: $(System.StageDisplayName)"
          echo "System.StageName: $(System.StageName)"
          echo "System.PullRequest.IsFork: $(System.PullRequest.IsFork)"
          echo "System.PullRequest.PullRequestId: $(System.PullRequest.PullRequestId)"
          echo "System.PullRequest.PullRequestNumber: $(System.PullRequest.PullRequestNumber)"
          echo "System.PullRequest.SourceBranch: $(System.PullRequest.SourceBranch)"
          echo "System.PullRequest.SourceRepositoryURI: $(System.PullRequest.SourceRepositoryURI)"
          echo "System.PullRequest.TargetBranch: $(System.PullRequest.TargetBranch)"
          echo "System.TeamFoundationCollectionUri: $(System.TeamFoundationCollectionUri)"
          echo "System.TeamProject: $(System.TeamProject)"
          echo "System.TeamProjectId: $(System.TeamProjectId)"
          echo "TF_BUILD: $(TF_BUILD)"
        displayName: "Print predefined variables step"

      - task: AzureCLI@2
        inputs:
          azureSubscription: ${{ parameters.ServiceConnection }}
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |        
            fabric_token=$(az account get-access-token --resource https://api.fabric.microsoft.com --query accessToken -o tsv)
            echo "##vso[task.setvariable variable=fabric_token]$fabric_token"
        displayName: 'Get MS Entra ID token for required resources'

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.12'
        displayName: 'Use Python 3.12'

      - script: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        displayName: 'Install Python requirements'
        workingDirectory: '$(Build.SourcesDirectory)/automation/prerequisites'

      - task: PythonScript@0
        inputs:
          scriptSource: 'filePath'
          scriptPath: '$(Build.SourcesDirectory)/automation/cicd/scripts/feature_setup.py'
          arguments: '--fabric_token $(fabric_token) --action merge'
        displayName: 'Delete Feature Workspaces'
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)